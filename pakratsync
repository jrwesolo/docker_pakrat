#!/usr/bin/env python

from urlparse import urlparse
from urllib2 import urlopen
import argparse
import os
import pakrat
import shutil
import sys
import time
import yaml

# this is needed because pakrat suppressed normal stdout because of YUM
def log(msg, header=False, repo_id=None):
    if header == True:
        output_str = "==> %s" % msg
    else:
        output_str = msg
    sys.__stdout__.write('%s\n' % output_str)
    sys.__stdout__.flush()
    if repo_id is not None:
        repo_ver_dir = os.path.join(OUTDIR, friendly(repo_id), SYNCVERSION)
        if os.path.exists(repo_ver_dir):
            with open(os.path.join(repo_ver_dir, 'sync_log.txt'), 'a') as logfile:
                logfile.write('[%s] %s\n' % (time.strftime('%Y-%m-%d %X %Z'), output_str))

class RepoCallback(object):
    # http://stackoverflow.com/questions/1094841/reusable-library-to-get-human-readable-version-of-file-size
    def sizeof_fmt(self, num, suffix='B'):
        for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
            if abs(num) < 1024.0:
                return "%3.1f%s%s" % (num, unit, suffix)
            num /= 1024.0
        return "%.1f%s%s" % (num, 'Yi', suffix)

    def repo_init(self, repo_id, num_pkgs):
        self.totalpkg = num_pkgs
        self.finishpkg = 0
        log('Found %d packages in repo %s' % (num_pkgs, repo_id), repo_id=repo_id)
    def local_pkg_exists(self, repo_id, pkgname):
        self.finishpkg += 1
        log('(%d/%d): %s, %s already downloaded' % (self.finishpkg, self.totalpkg, repo_id, pkgname))
    def repo_metadata(self, repo_id, status):
        log('Metadata for repo %s is now %s' % (repo_id, status), repo_id=repo_id)
    def download_start(self, repo_id, _file, url, basename, size, text):
        self.fname = basename
    def download_end(self, repo_id, size):
        if self.fname.endswith('.rpm'):
            self.finishpkg += 1
            log('(%d/%d): %s, %s (%s)' % (self.finishpkg, self.totalpkg, repo_id, self.fname, self.sizeof_fmt(size)), repo_id=repo_id)

# make directories only if they don't exist
def safe_makedirs(path, mode = None):
    if not os.path.exists(path):
        if mode != None:
            os.makedirs(path, mode)
        else:
            os.makedirs(path)

# load configuration
def repo_config():
    with open(REPOFILE) as f:
        config = yaml.safe_load(f)
        if type(config) != dict:
            log('Malformed configuration file')
            sys.exit(1)
        else:
            return config

# return a friendly name without '/'s
def friendly(name):
    return sanitize(name).replace('/', '-')

def sanitize(name):
    return name.strip().strip('/')

# create folders needed for syncing
def setup_folders(repos):
    # setup public folder
    public = os.path.join(OUTDIR, 'public')
    safe_makedirs(public)

    # directories for repos
    for repo in repos:
        real_path = os.path.join(OUTDIR, friendly(repo))
        symbolic_path = os.path.join(public, sanitize(repo))
        safe_makedirs(real_path)
        head, tail = os.path.split(symbolic_path)
        safe_makedirs(head)
        os.chdir(head)
        relative_path = os.path.relpath(real_path)
        # clean out symbolic_path if incorrect
        if os.path.islink(symbolic_path):
            if os.readlink(symbolic_path) != relative_path:
                os.unlink(symbolic_path)
        elif os.path.isdir(symbolic_path):
            shutil.rmtree(symbolic_path)
        elif os.path.isfile(symbolic_path):
            os.unlink(symbolic_path)
        # setup symbolic link if missing
        if not os.path.exists(symbolic_path):
            os.symlink(relative_path, symbolic_path)

def download_gpg(config):
    for repo, opts in config.iteritems():
        real_path = os.path.join(OUTDIR, friendly(repo))
        if opts.has_key('gpgkey'):
            try:
                key_name = os.path.basename(urlparse(opts['gpgkey']).path)
                key_data = urlopen(opts['gpgkey'])
                with open(os.path.join(real_path, key_name), 'w') as f:
                    f.write(key_data.read())
                key_data.close()
            except:
                log('Unable to download %s' % opts['gpgkey'])
                pass

def sync_repos(config):
    repo_factories = []

    for repo, opts in config.iteritems():
        r = None
        if 'baseurls' in opts:
            r = pakrat.repo.factory(
                friendly(repo),
                baseurls=opts['baseurls']
            )
        elif 'mirrorlist' in opts:
            r = pakrat.repo.factory(
                friendly(repo),
                mirrorlist=opts['mirrorlist']
            )
        if r != None:
            repo_factories.append(r)

    repos, errors, elapsed = pakrat.sync(
        basedir=OUTDIR,
        objrepos=repo_factories,
        repoversion=SYNCVERSION,
        callback=RepoCallback()
    )

    return repos, errors, elapsed

def main():
    log('parsing configuration', header=True)
    config = repo_config()
    for repo in config.iterkeys():
        log(repo)
    setup_folders(config.keys())
    download_gpg(config)
    log('syncing repositories', header=True)
    repos, errors, elapsed = sync_repos(config)
    repo_str = 'repository' if repos == 1 else 'repositories'
    error_str = 'error' if errors == 1 else 'errors'
    log('%d %s, %d %s, %s' % (repos, repo_str, errors, error_str, elapsed), header=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--outdir', action='store', required=True)
    parser.add_argument('-c', '--config', action='store', required=True)
    args = parser.parse_args()
    REPOFILE = args.config
    OUTDIR = args.outdir
    SYNCVERSION = time.strftime('%Y-%m-%d')
    main()
